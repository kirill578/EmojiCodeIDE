🔮 1 0
📻

🌮
  Boolean
🌮
🌍 🕊 👌🍇
  🌮 Whether this value and *other* are considered equal. 🌮
  🐖 😛 other 🐕 ➡️ 👌 🍇
    🍎 😛 🐕 other
  🍉

  🌮 Logical and. Returns true if both, the receiver and other, are true. 🌮
  🐖 🎊 other 👌 ➡️ 👌 🍇
    🍎 🎊 🐕 other
  🍉

  🌮 Logical or. Returns true if the receiver or other or both are true. 🌮
  🐖 🎉 other 👌 ➡️ 👌 🍇
    🍎 🎉 🐕 other
  🍉

  🌮
    Inverts the boolean. Returns true if the boolean is false, and false if the
    boolean is true.
  🌮
  🐖 ❎ ➡️ 👌 🍇
    🍎 ❎ 🐕
  🍉
🍉

🌮
  Integer
🌮
🌍 🕊 🚂 🍇
  🌮
    Returns a cryptographically secure random number that is greater than
    or equal to *min* and less than or equal to *max*.
  🌮
  🐈 🎰 min 🚂 max 🚂 📻

  🌮 Whether this value and *other* are considered equal. 🌮
  🐖 😛 other 🐕 ➡️ 👌 🍇
    🍎 😛 🐕 other
  🍉

  🌮 Returns the receiver minus *other*. 🌮
  🐖 ➖ other 🚂 ➡️ 🚂 🍇
    🍎 ➖ 🐕 other
  🍉
  🌮 Returns the receiver plus *other*. 🌮
  🐖 ➕ other 🚂 ➡️ 🚂 🍇
    🍎 ➕ 🐕 other
  🍉
  🌮 Returns the receiver divided by *other*. 🌮
  🐖 ➗ other 🚂 ➡️ 🚂 🍇
    🍎 ➗ 🐕 other
  🍉
  🌮 Returns the receiver multiplied by *other*. 🌮
  🐖 ✖️ other 🚂 ➡️ 🚂 🍇
    🍎 ✖️ 🐕 other
  🍉
  🌮 Returns the receiver modulus *other*. 🌮
  🐖 🚮 other 🚂 ➡️ 🚂 🍇
    🍎 🚮 🐕 other
  🍉
  🌮 Returns true if the receiver is smaller than *other*. 🌮
  🐖 ◀️ other 🚂 ➡️ 👌 🍇
    🍎 ◀️ 🐕 other
  🍉
  🌮 Returns true if the receiver is greater than *other*. 🌮
  🐖 ▶️ other 🚂 ➡️ 👌 🍇
    🍎 ▶️ 🐕 other
  🍉
  🌮 Returns true if the receiver is smaller than or equal to *other*. 🌮
  🐖 ⬅️ other 🚂 ➡️ 👌 🍇
    🍎 ⬅️ 🐕 other
  🍉
  🌮 Returns true if the receiver is greater than or equal to *other*. 🌮
  🐖 ➡️ other 🚂 ➡️ 👌 🍇
    🍎 ➡️ 🐕 other
  🍉
  🌮 Returns this integer AND *other*. 🌮
  🐖 ⭕️ other 🚂 ➡️ 🚂 🍇
    🍎 ⭕️ 🐕 other
  🍉
  🌮 Returns this integer OR *other*. 🌮
  🐖 💢 other 🚂 ➡️ 🚂 🍇
    🍎 💢 🐕 other
  🍉
  🌮 Returns this integer XOR *other*. 🌮
  🐖 ❌ other 🚂 ➡️ 🚂 🍇
    🍎 ❌ 🐕 other
  🍉
  🌮 Returns NOT applied to this integer. 🌮
  🐖 🚫 ➡️ 🚂 🍇
    🍎 🚫 🐕
  🍉
  🌮 Shifts this integer by *n* bits to the left. 🌮
  🐖 👈 n 🚂 ➡️ 🚂 🍇
    🍎 👈 🐕 n
  🍉
  🌮 Shifts this integer by *n* bits to the right. 🌮
  🐖 👉 n 🚂 ➡️ 🚂 🍇
    🍎 👉 🐕 n
  🍉
  🌮 Returns the absolute value of this 🚂. 🌮
  🐖 🏧 ➡️ 🚂 📻
🍉

🌮
  Double
🌮
🌍 🕊 🚀 🍇
  🌮 Whether this value and *other* are considered equal. 🌮
  🐖 😛 other 🐕 ➡️ 👌 🍇
    🍎 😛 🐕 other
  🍉

  🌮 Returns the receiver minus *other*. 🌮
  🐖 ➖ other 🚀 ➡️ 🚀 🍇
    🍎 ➖ 🐕 other
  🍉
  🌮 Returns the receiver plus *other*. 🌮
  🐖 ➕ other 🚀 ➡️ 🚀 🍇
    🍎 ➕ 🐕 other
  🍉
  🌮 Returns the receiver divided by *other*. 🌮
  🐖 ➗ other 🚀 ➡️ 🚀 🍇
    🍎 ➗ 🐕 other
  🍉
  🌮 Returns the receiver multiplied by *other*. 🌮
  🐖 ✖️ other 🚀 ➡️ 🚀 🍇
    🍎 ✖️ 🐕 other
  🍉
  🌮
    Returns the floating-point remainder of the division operation
    `receiver/other`. This will always be the value of `receiver - n*other` and
    will always have the same sign as the receiver.
  🌮
  🐖 🚮 other 🚀 ➡️ 🚀 🍇
    🍎 🚮 🐕 other
  🍉
  🌮 Returns true if the receiver is smaller than *other*. 🌮
  🐖 ◀️ other 🚀 ➡️ 👌 🍇
    🍎 ◀️ 🐕 other
  🍉
  🌮 Returns true if the receiver is greater than *other*. 🌮
  🐖 ▶️ other 🚀 ➡️ 👌 🍇
    🍎 ▶️ 🐕 other
  🍉
  🌮 Returns true if the receiver is smaller than or equal to *other*. 🌮
  🐖 ⬅️ other 🚀 ➡️ 👌 🍇
    🍎 ⬅️ 🐕 other
  🍉
  🌮 Returns true if the receiver is greater than or equal to *other*. 🌮
  🐖 ➡️ other 🚀 ➡️ 👌 🍇
    🍎 ➡️ 🐕 other
  🍉

  🌮 Returns the absolute value of this 🚀. 🌮
  🐖 🏧 ➡️ 🚀 📻

  🌮
    Returns an approximation of 𝜋.
  🌮
  🐇🐖 ⚾️ ➡️ 🚀 🍇
    🍎 3.14159265358979323846264338327950288
  🍉
  🌮
    Returns an approximation of 𝜏 which is equal to 𝜋/2.
  🌮
  🐇🐖 🏉 ➡️ 🚀 🍇
    🍎 1.57079632679489661923132169163975144
  🍉
  🌮
    Returns an approximation of 𝜏/2 which is equal to 𝜋/4.
  🌮
  🐇🐖 🎾 ➡️ 🚀 🍇
    🍎 0.785398163397448309615660845819875721
  🍉
  🌮
    Returns an approximation of ℇ (Euler’s number).
  🌮
  🐇🐖 🏹 ➡️ 🚀 🍇
    🍎 2.71828182845904523536028747135266250
  🍉

  🌮
    Returns the sine of this 🚀.
  🌮
  🐖 📓 ➡️ 🚀 📻
  🌮
    Returns the cosine of this 🚀.
  🌮
  🐖 📕 ➡️ 🚀 📻
  🌮
    Returns the tangent of this 🚀.
  🌮
  🐖 📘 ➡️ 🚀 📻
  🌮
    Returns the arcsine of this 🚀.
  🌮
  🐖 📔 ➡️ 🚀 📻
  🌮
    Returns the arccosine of this 🚀.
  🌮
  🐖 📙 ➡️ 🚀 📻
  🌮
    Returns the arctangent of this 🚀.
  🌮
  🐖 📗 ➡️ 🚀 📻
  🌮
    Returns this 🚀 to the exponent power, that is, base<sup>exponent</sup>.
  🌮
  🐖 🏂 exponent 🚀 ➡️ 🚀 📻
  🌮
    Returns the positive square root of this 🚀.
  🌮
  🐖 ⛷ ➡️ 🚀 📻
  🌮
    Returns the smallest integer greater than or equal to this 🚀.
  🌮
  🐖 🚴 ➡️ 🚂 📻
  🌮
    Returns the largest integer less than or equal to this 🚀.
  🌮
  🐖 🚵 ➡️ 🚂 📻
  🌮
    Returns the value of this 🚀 rounded to the nearest integer.

    If the fractional portion of this 🚀 is 0.5 or greater, the argument is
    rounded to the next higher integer. If the fractional portion of this 🚀 is
    less than 0.5, the argument is rounded to the next lower integer.
  🌮
  🐖 🏇 ➡️ 🚂 📻
  🌮
    Returns the base 2 logarithm of this 🚀.
  🌮
  🐖 🚣 ➡️ 🚀 📻

  🌮
    Returns the natural (base ℇ) logarithm of this 🚀.
  🌮
  🐖 🏄 ➡️ 🚀 📻
🍉

🌮
  Symbol
🌮
🌍 🕊 🔣 🍇
  🌮 Whether this value and *other* are considered equal. 🌮
  🐖 😛 other 🐕 ➡️ 👌 🍇
    🍎 😛 🐕 other
  🍉
🍉

🌮
  The 🔡 class represents a string. [Read more in the language reference.](../../reference/the-s-package.html#-strings)
🌮
🌍 🐇 🔡 🍇🍉
🌮
  The 🍨 class represents an ordered mutable collection. [Read more in the
  language reference.](../../reference/the-s-package.html#-lists)
🌮
🌍 🐇 🍨🐚Element ⚪️ 🍇🍉
🌮
  A 🚨 instance represents an error. Many methods interacting with the operating
  system will return an error on a failure.
🌮
🌍 🐇 🚨 🍇🍉
🌮 📇 is an abstract interface to binary data. 🌮
🌍 🐇 📇 🍇🍉
🌮
  The 🍯 class represents a dictionary. [Read more in the
  language reference.](../../reference/the-s-package.html#-dictionaries)
🌮
🌍 🐇 🍯🐚Element ⚪️ 🍇🍉
🌍 🐇 🌶 🍇🍉
🌍 🐇 🍇 🍇🍉

🌮
  🍡 can enumerate a collection and generates elements from the object it
  enumerates.

  To get the items from an iterator call the 🔽 method on it, until ❓ returns
  👎 which indicates that there are no more items.
🌮
🌍 🐊 🍡🐚Element ⚪️ 🍇
  🌮
    Returns the next object. Expect undefined behavior if you call this method
    when ❓ previously returned 👎.
  🌮
  🐖 🔽 ➡️ Element
  🌮
    Whether the enumerator has more elements to provide.
  🌮
  🐖 ❓ ➡️ 👌
🍉

🌮
  A class whose instances shall be enumerable using the 🔂 loop must
  implement this protocol.
🌮
🌍 🐊 🔂🐚Element⚪️ 🍇
  🌮
    This method must return an instance of a class that conforms to
    [[🍡]] which will be used to enumerate this instance.
  🌮
  🐖 🍡 ➡️ 🍡🐚Element
🍉

🌮
  Represents a range which per definition is an immutable sequence of
  numbers. [Read more in the
  language reference.](../../reference/the-s-package.html#-ranges)
🌮
🌍 🐇 ⏩ 🍇
  🌮
    Creates an range from start to stop.
  🌮
  🐈 ⏩ start 🚂 stop 🚂 📻
  🌮
    Creates an range from start to stop with the given step.
  🌮
  🐈 ⏭ start 🚂 stop 🚂 step 🚂 📻
  🌮
    Returns the `n`th element of the range. `n` is only valid if
    `start + step * n` is `>= start` and `< stop`. If `n` is invalid
    Nothingness is returned.
  🌮
  🐖 🐽 n 🚂 ➡️ 🍬🚂 📻
🍉

🌮
  A class whose elements can be accessed by 🐽. The number of elements must
  be finite and returned by 🐔.
🌮
🌍 🐊 🐽️🐚Element⚪️ 🍇
  🌮
    Gets the item at `index`. If the index is invalid Nothingness is returned.
  🌮
  🐖 🐽 index 🚂 ➡️ 🍬Element
  🌮 Returns the number of items in the list. 🌮
  🐖 🐔 ➡️ 🚂
🍉

🌮
  Iterator over a 🐽. This class is an iterator that can iterate over
  every type that conforms to the 🐽 protocol.
🌮
🌍 🐇 🌳🐚Element⚪️ 🍇
  🐊 🍡🐚Element
  🐊 🔂🐚Element

  🍰 iteratee 🐽🐚Element
  🍰 index 🚂

  🐈 🆕 🍼 iteratee 🐽🐚Element 🍇
    🍮 index 0
  🍉

  🐖 🔽 ➡️ Element 🍇
    🍦 sy 🍺 🐽 iteratee index
    🍫 index
    🍎 sy
  🍉

  🐖 ❓ ➡️ 👌 🍇
    🍎 ◀️ index 🐔 iteratee
  🍉

  🐖 🍡 ➡️ 🍡🐚Element 🍇
    🍎 🐕
  🍉
🍉

🌮
  Iterator over a 🍨. This iterator does *not* unwrap any values retrieved from
  the list and therefore returns optionals. You can use the subclass [[🌴]] to
  have optionals automatically unwrapped.
🌮
🌍 🐇 🌱🐚Element⚪️ 🍇
  🐊 🍡🐚🍬Element
  🐊 🔂🐚🍬Element

  🍰 iteratee 🍨🐚Element
  🍰 index 🚂

  🐈 🆕 🍼 iteratee 🍨🐚Element 🍇
    🍮 index 0
  🍉

  🐖 🔽 ➡️ 🍬Element 🍇
    🍦 sy 🐽 iteratee index
    🍫 index
    🍎 sy
  🍉

  🐖 ❓ ➡️ 👌 🍇
    🍎 ◀️ index 🐔 iteratee
  🍉

  🌮
    Removes the element last returned by 🔽 from the list. Calling this method
    before having called 🔽 results in undefined behavior.
  🌮
  🐖 🚯  🍇
    🍳 index
    🐨 iteratee index
  🍉

  🐖 🍡 ➡️ 🍡🐚Element 🍇
    🍎 🐕
  🍉

  🔐 🐖 🍚 ➡️ 🍨🐚Element 🍇
    🍎 iteratee
  🍉

  🔐 🐖 🍶 ➡️ 🚂 🍇
    🍦 i index
    🍫 index
    🍎 i
  🍉
🍉

🌮
  Iterator over a 🍨. This iterator unwraps all values obtained from the list.
  You can therefore not use this iterator if the list contains Nothingness, but
  you may use [[🌱]].
🌮
🌍 🐇 🌴🐚Element⚪️ 🌱🐚Element 🍇
  🐊 🍡🐚Element
  🐊 🔂🐚Element

  ✒️ 🐖 🔽 ➡️ Element 🍇
    🍎 🍺 🐽 🍚🐕 🍶🐕
  🍉
🍉

🐋 🚂 🍇
  🌮
    Creates a string representation of this integer. *base* must be greater than
    or equal to 2 and less than or equal to 35.

    The digits used to represent the integer are
    `0123456789abcdefghijklmnopqrstuvxyz`.
  🌮
  🐖 🔡 base 🚂 ➡️ 🔡 📻

  🌮 Returns the double representation of this integer. 🌮
  🐖 🚀 ➡️ 🚀 🍇
    🍎 🚀 🐕
  🍉
🍉

🐋 🚀 🍇
  🌮
    Creates a 🔡 representation of this 🚀 and the given precision – the number
    of digits after the decimal separator “.”.
  🌮
  🐖 🔡 precision 🚂 ➡️ 🔡 📻
🍉

🐋 🔣 🍇
  🌮 Creates a 🔡 from this symbol. 🌮
  🐖 🔡 ➡️ 🔡 📻
  🌮 Returns the Unicode code point of this symbol. 🌮
  🐖 🚂 ➡️ 🚂 📻
🍉

🐋 🔡 🍇
  🐊 🔂🐚🔣
  🐊 🐽🐚🔣

  🌮 Prompts the user for input. (via the standard input/output) 🌮
  🐈 😯 prompt 🔡 📻

  🌮 Creates a string from the given list of symbols. 🌮
  🐈 🎙 symbolList 🍨🐚🔣 📻

  🌮
    Creates a string by joining all elements into a string sepearted
    by *separator*.
  🌮
  🐈 🍨 list 🍨🐚🔡 separator 🔡 📻

  🌮 Puts this 🔡 to the standard output. 🌮
  🐖 😀 📻

  🌮 Returns 👍 if this 🔡 is equal to b. 🌮
  🐖 😛 b 🔡 ➡️ 👌📻

  🌮
    Compares this string to `b` and returns -1, 0, or 1 depending on whether
    this string is less than, equal to, or greater than `b`.

    >!N Note that this method compares the strings byte per byte
    >!N and is only meant for use with non-localized sorting. The results of
    >!N the sort will always be the same, but may not appear logical to human
    >!N beings.
  🌮
  🐖 ↔️ b 🔡 ➡️ 🚂 📻

  🌮
    Returns the characters in a string beginning at the specified location
    through the specified number of characters.

    from: Location at which to begin extracting characters. If a negative number
    is given, it is treated as strLength + start where strLength = to the length
    of the string (for example, if start is -3 it is treated as strLength - 3.)
  🌮
  🐖 🔪 from 🚂 length 🚂 ➡️ 🔡 📻

  🌮
    Finds the first occurrences of a string in this string. Search is done from
    left to right. Nothingness is returned if *search* cannot be found.
  🌮
  🐖 🔍 search 🔡 ➡️ 🍬🚂 📻

  🌮 Whether this strings begins with another string. 🌮
  🐖 🎼 testString 🔡 ➡️ 👌 📻

  🌮 Whether this strings ends with another string. 🌮
  🐖 ⛳️ testString 🔡 ➡️ 👌 📻

  🌮
    The 🔧 method returns a new string, on which whitespace has been removed
    from both ends of a string.
  🌮
  🐖 🔧 ➡️ 🔡 📻

  🌮
    This string is split up into substring at each place *seperator* is found.
    *seperator* itself is removed from the string.
  🌮
  🐖 🔫 separator 🔡 ➡️ 🍨🐚🔡 📻

  🌮
    This string is split up into substring at each place *seperator* is found.
    *seperator* itself is removed from the string.

    Prefer this method over `🔫` if the separator is just a single character.
  🌮
  🐖 💣 separator 🔣 ➡️ 🍨🐚🔡 📻

  🌮
    This method returns the number of Unicode code points of this string. This
    is possibly not the number of bytes needed to write the string to a file,
    since Emojicode encodes everything into UTF8.
  🌮
  🐖 🐔 ➡️ 🚂 📻

  🌮
    Returns the number of bytes needed to encode this string into proper UTF8.
  🌮
  🐖 📐 ➡️ 🚂 📻
  🌮
    This methods tries to construct an integer from this string in the given
    base. It returns the integer or Nothingness if the string does not match the
    regular expression `[+-]?[0-9a-zA-Z]+` or it does not represent a valid
    value in the given base.
  🌮
  🐖 🚂 base 🚂 ➡️ 🍬🚂 📻

  🌮
    This methods tries to construct a 🚀 from this 🔡. It returns the 🚀, or ✨
    if the 🔡 does not match the regular expression
    `[+-]?([0-9]+(\.[0-9]*)?|[0-9]*\.[0-9]+)([eE][+-]?[0-9]+)?`
    or if it does not represent a valid 🚀.
  🌮
  🐖 🚀 ➡️ 🍬🚀 📻

  🌮 Creates a new string by appending *symbol*. 🌮
  🐖 📝 symbol 🔣 ➡️ 🔡 📻

  🌮 Gets a symbol by its index. 🌮
  🐖 🐽 index 🚂 ➡️ 🍬🔣 📻

  🌮 Converts the string to data encoded as UTF8. 🌮
  🐖 📇 ➡️ 📇 📻

  🌮 Returns an array with the symbols from this string. 🌮
  🐖 🎶 ➡️ 🍨🐚🔣 📻

  🌮
    Tries to parse this string as JSON. If the string doesn’t represent valid
    JSON Nothigness is returned. The depth is limited to 256 levels.
  🌮
  🐖 📰 ➡️ ⚪️ 📻

  🌮
    Returns a new string in which at least all letters contained in ASCII
    were converted to uppercase.
  🌮
  🐖 📫 ➡️ 🔡 📻

  🌮
    Returns a new string in which at least all letters contained in ASCII
    were converted to lowercase.
  🌮
  🐖 📪 ➡️ 🔡 📻

  🌮 Returns an iterator to iterate over the symbols of this string. 🌮
  🐖 🍡 ➡️ 🌳🐚🔣 🍇
    🍎 🔷🌳🐚🔣🆕 🐕
  🍉
🍉

🐋 🍨 🍇
  🐊 🔂🐚Element
  🐊 🐽🐚Element

  🌮 Creates an empty list. 🌮
  🐈 🐸 📻

  🌮 Creates an empty list with the given initial capacity. 🌮
  🐈 🐧 capacity 🚂 📻

  🌮 Returns a shallow copy of this list. 🌮
  🐖 🐮 ➡️ 🍨🐚Element 📻

  🌮 Appends `item` to the end of the list in `O(1)`. 🌮
  🐖 🐻 item Element 📻

  🌮
    Gets the item at `index` in `O(1)`. If the index is invalid Nothingness is
    returned.
  🌮
  🐖 🐽 index 🚂 ➡️ 🍬Element 📻

  🌮
    Sets `value` at `index`. If `index` is bigger than the capacity of the list,
    the list is resized to a capacity of `index + 1`. Complexity: `O(1)`.
  🌮
  🐖 🐷 index 🚂 value Element 📻

  🌮
    Removes the item at `index` and shifts all following items to the left in
    `O(count - index)`.

    Returns 👍 unless the index is out of range.
  🌮
  🐖 🐨 index 🚂 ➡️ 👌 📻

  🌮
    Inserts the given values before the element with the given index.

    All items beginning from `index` are shifted to the right and `item` is
    then inserted at `index`. Complexity: `O(count - index)`.
  🌮
  🐖 🐵 index 🚂 item Element 📻

  🌮 Returns the number of items in the list. 🌮
  🐖 🐔 ➡️ 🚂 📻

  🌮
    Removes the last item from the list and returns it in `O(1)`.
    If the list is empty ✨ is returned.
  🌮
  🐖 🐼 ➡️ 🍬Element 📻

  🌮
    Removes all elements from the list but keeps the list’s capacity.

    This can be much more efficient than using a new list. Complexity:
    `O(count)`.
  🌮
  🐖 🐗 📻

  🌮
    Ensures that the list is large enoguh to store at least `capacity` elements.

    You should use this method if you plan to heavily use 🐷 with large indices
    in order to avoid automatic, useless allocations.

    Complexity: `O(1)`.
  🌮
  🐖 🐴 capacity 🚂 📻

  🌮
    Sorts this array in place using the quick sort algorithm.

    `comparator` must return an integer less than, equal to, or greater than 0,
    if the first argument is considered respectively less than, equal to, or
    greater than the second.
  🌮
  🐖 🦁 comparator 🍇Element Element➡️🚂🍉 📻

  🌮
    Shuffles the list in place using the Fisher Yates algorithm. The shuffle can
    be considered secure on any BSD or Linux system.
  🌮
  🐖 🐹 📻

  🌮
    Calls callback with each element in the list and appends the returned
    value to the end of a new list.
  🌮
  🐖 🐰 🐚A⚪️ callback 🍇Element➡️A🍉 ➡️ 🍨🐚A 🍇
    🍦 g 🔷🍨🐚A🐧 🐔 🐕
    🔂 element 🐕 🍇
      🐻 g 🍭 callback element
    🍉
    🍎 g
  🍉

  🌮
    Returns a new array with all elements that pass the test implemented by
    `callback`.
  🌮
  🐖 🐭 callback 🍇Element➡️👌🍉 ➡️ 🍨🐚Element 🍇
    🍦 g 🔷🍨🐚Element🐸
    🔂 element 🐕 🍇
      🍊 🍭 callback element 🍇
        🐻 g element
      🍉
    🍉
    🍎 g
  🍉

  🌮
    Tests whether all elements in the array pass the test implemented by
    `callback`.

    The method immdiately returns 👎 if `callback` returned 👎 for one element.
  🌮
  🐖 🐯 callback 🍇Element➡️👌🍉 ➡️ 👌 🍇
    🔂 element 🐕 🍇
      🍊 ❎ 🍭 callback element 🍇
        🍎 👎
      🍉
    🍉
    🍎 👍
  🍉

  🌮
    Tests whether this array and `other` are equal. Equality of two elements
    is defined by `callback` which must return true if the first and the second
    argument, which represent elements from this and the other array
    respectively, are equal. `callback` is not necessarily called at all.
  🌮
  🐖 🦄 🐚A⚪️ other 🍨🐚A callback 🍇Element A➡️👌🍉 ➡️ 👌 🍇
    🍊 ❎ 😛 🐔 🐕 🐔 other 🍇
      🍎 👎
    🍉

    🍮 i 0
    🔁 ◀️ i 🐔 other 🍇
      🍊 ❎ 🍭 callback 🍺🐽 🐕 i 🍺 🐽 other i 🍇
        🍎 👎
      🍉
      🍫 i
    🍉
    🍎 👍
  🍉

  🌮 Returns an iterator to iterate over the elements of this list. 🌮
  🐖 🍡 ➡️ 🌴🐚Element 🍇
    🍎 🔷⚫️🆕 🐕
  🍉
🍉

🐋 📇 🍇
  🐊 🐽🐚🚂
  🐊 🔂🐚🚂

  🌮 Returns 👍 if this is equal to b. 🌮
  🐖 😛 b 📇 ➡️ 👌 📻
  🌮 Returns the number of bytes represented by this instance. 🌮
  🐖 🐔 ➡️ 🚂 📻
  🌮
    Returns an integer representing the value of the byte at the given index
    `index`. A negative index is assumed to be relative to the end of the data.

    This method treats the byte at the index as if it was an unsigned value, that is the front most
    bit is also counted towards the value and does not indicate the sign. The value is therefore
    always positive.

    Nothingness is returned if the index is out of range.
  🌮
  🐖 🐽 index 🚂 ➡️ 🍬🚂 📻
  🌮
    If this object represents the bytes of a UTF8 encoded text this method
    returns a string representing that text. Nothingness is returned if this
    object does not represent a valid UTF8 sequence.
  🌮
  🐖 🔡 ➡️ 🍬🔡 📻
  🌮
    Returns a copy of the data within the given range. This method employes
    various techniques to make this as efficient as possible.
  🌮
  🐖 🔪 from 🚂 length 🚂 ➡️ 📇 📻
  🌮
    Finds the first occurrences of *search* in the bytes represented by this
    instance. Search is done from left to right. Nothingness is returned if
    *search* cannot be found.
  🌮
  🐖 🔍 searchValue 📇 ➡️ 🍬🚂 📻
  🌮
    Creates a new data object by with the bytes of this instance and *b*
    concatenated.
  🌮
  🐖 📝 b 📇 ➡️ 📇 📻

  🌮 Returns an iterator to iterate over the bytes of this data object. 🌮
  🐖 🍡 ➡️ 🌳🐚🚂 🍇
    🍎 🔷🌳🐚🚂🆕 🐕
  🍉
🍉

🐋 🚨 🍇
  🌮 Create an error. 🌮
  🐈 😮 message 🔡 code 🚂 📻
  🌮
    Returns the message associated with the error.
    This is maybe an empty string.
  🌮
  🐖 😤 ➡️ 🔡 📻
  🌮 Returns the code associated with the error. 🌮
  🐖 😴 ➡️ 🚂 📻
🍉

🐋 🍯 🍇
  🌮 Creates an empty 🍯. 🌮
  🐈 🐸 📻
  🌮
    Returns the value assigned to *key*. If key is not in the 🍯 ✨ is
    returned.
  🌮
  🐖 🐽 key 🔡 ➡️ 🍬Element 📻
  🌮
    Removes *key* and its assigned value from the 🍯. No action is performed if
    *key* is not in the 🍯.
  🌮
  🐖 🐨 key 🔡 📻

  🌮 Adds a key-value pair. 🌮
  🐖 🐷 key 🔡 object Element 📻

  🌮
    Returns a list consisting of all keys in this 🍯.

    >!N Note that the keys in the returned list are arbitrarily ordered.

  🌮
  🐖 🐙 ➡️ 🍨🐚🔡 📻

  🌮
    Removes all key-value pairs in this 🍯 and returns the number of deleted
    items.
  🌮
  🐖 🐗 ➡️ 🚂 📻

  🌮 Checks whether *key* is in this 🍯. 🌮
  🐖 🐣 key 🔡 ➡️ 👌📻

  🌮 Returns the number of items. 🌮
  🐖 🐔 ➡️ 🚂📻
🍉

🌮
  💻 provides several class methods that can be used to interact with the
  operating system. It cannot be instantiated.
🌮
🌍 🐇 💻 🍇
  🌮
    Returns a list of the arguments passed to the programm. Calling this method
    is rather expensive.
  🌮
  🐇🐖 🎞 ➡️ 🍨🐚🔡 📻

  🌮
    Gets an environment variable by its name. If the variable cannot be found
    ✨ is returned.
  🌮
  🐇🐖 🌳 variableName 🔡 ➡️ 🍬🔡 📻

  🌮
    Immediately exits the program with the given status code. The code may
    not be larger than 255 on most operating systems.
  🌮
  🐇🐖 🚪 status 🚂 📻

  🌮
    Returns the standard output of running `command` in a subshell.
  🌮
  🐇🐖 🕴 command 🔡 ➡️ 🍬🔡 📻

  🌮 Returns the current working directory. 🌮
  🐇🐖 🌍 ➡️ 🔡 📻

  🌮
    Returns the current time in seconds since the Epoch in Greenwich Mean Time.
  🌮
  🐇🐖 🕰 ➡️ 🚂📻
🍉

🌮
  Represents an execution thread of the program.
🌮
🌍 🐇 💈 🍇
  🌮
    Creates an new thread and calls the given callable `callable` on the newly
    created thread.
  🌮
  🐈 🆕 callable 🍇🍉 📻
  🌮
    Blocks the calling thread until this thread has finished work.
  🌮
  🐖 🛂 📻
  🌮
    Suspends the calling thread from execution for at least the number of
    seconds specified by the argument *seconds*.
  🌮
  🐇🐖 ⏳ seconds 🚂 📻
  🌮
    Suspends the calling thread from execution for at least the number of
    microseconds specified by the argument *microseconds*.
  🌮
  🐇🐖 ⏲ microseconds 🚂 📻
🍉

🌮
  🔐 represents a mutex. A mutex is a simple semaphore that can be used to
  coordinate access to shared data from multiple concurrent threads.
🌮
🌍 🐇 🔐 🍇
  🌮
    Creates an new mutex.
  🌮
  🐈 🆕 📻
  🌮
    Attempts to lock the mutex and waits until it becomes available if it is
    already locked.
  🌮
  🐖 🔒 📻
  🌮
    Unlocks the mutex.
  🌮
  🐖 🔓 📻
  🌮
    Attempts to lock the mutex and returns immediately. Returns 👍 if the mutex
    could be locked.
  🌮
  🐖 🔐 ➡️ 👌 📻
🍉
